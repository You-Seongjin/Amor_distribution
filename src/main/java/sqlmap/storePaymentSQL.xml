<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.amor.storePaymentSQL">	
	<select id="allAll" resultType="Integer" parameterType="Map">
		<![CDATA[
		select nvl(sum(a), 0) as a from
		(select sum(store_payment_price) as a from store_payment 
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') <= #{endd}
		union all
		select sum(ticketing_price) as a from ticketing 
		where ticketing_state <> 'n'
		and to_char(ticketing_reservetime, 'yyyy-mm-dd') >= #{startd}
		and to_char(ticketing_reservetime, 'yyyy-mm-dd') <= #{endd})
		]]>
	</select>
	
	<select id="allStore" resultType="Integer" parameterType="Map">
		<![CDATA[
		select nvl(sum(store_payment_price), 0) as a from store_payment 
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') <= #{endd}
		]]>
	</select>
	
	<select id="dayAll" resultType="com.amor.storePayment.model.StorePaymentDTO" parameterType="Map">
		<![CDATA[
		select * from
		(select nvl(store_payment_price, 0) as a, to_char(store_payment_paymentdate, 'yyyy-mm-dd') as b from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') <= #{endd}
		union all
		select nvl(ticketing_price, 0) as a, to_char(ticketing_reservetime, 'yyyy-mm-dd') as b from ticketing
		where ticketing_state <> 'n'
		and to_char(ticketing_reservetime, 'yyyy-mm-dd') >= #{startd}
		and to_char(ticketing_reservetime, 'yyyy-mm-dd') <= #{endd})
		order by b desc
		]]>
	</select>
	
	<select id="dayAllTotal" resultType="Integer" parameterType="Map">
		<![CDATA[
		select nvl(sum(aa), 0) as a from
		(select nvl(store_payment_price, 0) as aa from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') <= #{endd}
		union all
		select nvl(ticketing_price, 0) as aa from ticketing
		where ticketing_state <> 'n'
		and to_char(ticketing_reservetime, 'yyyy-mm-dd') >= #{startd}
		and to_char(ticketing_reservetime, 'yyyy-mm-dd') <= #{endd})
		]]>
	</select>
	
	<select id="dayStore" resultType="com.amor.storePayment.model.StorePaymentDTO" parameterType="Map">
		<![CDATA[
		select nvl(store_payment_price, 0) as a, to_char(store_payment_paymentdate, 'yyyy-mm-dd') as b
		from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') <= #{endd}
		order by store_payment_paymentdate desc
		]]>
	</select>
	
	<select id="dayStoreTotal" resultType="Integer" parameterType="Map">
		<![CDATA[
		select nvl(sum(store_payment_price), 0) as a
		from store_payment
		where store_payment_status <> 'n' 
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm-dd') <= #{endd}
		]]>
	</select>
	
	<select id="monthAll" resultType="com.amor.storePayment.model.StorePaymentDTO" parameterType="Map">
		<![CDATA[
		select nvl(sum(aa), 0) as a, to_char(bb, 'yyyy-mm') as b from
		(select nvl(sum(store_payment_price), 0) as aa, to_date(to_char(store_payment_paymentdate, 'yyyy-mm'), 'yyyy-mm') as bb from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm') <= #{endd}
		group by to_char(store_payment_paymentdate, 'yyyy-mm')
		union all
		select nvl(sum(ticketing_price), 0) as aa, to_date(to_char(ticketing_reservetime, 'yyyy-mm'), 'yyyy-mm') as bb from ticketing
		where ticketing_state <> 'n'
		and to_char(ticketing_reservetime, 'yyyy-mm') >= #{startd}
		and to_char(ticketing_reservetime, 'yyyy-mm') <= #{endd}
		group by to_char(ticketing_reservetime, 'yyyy-mm'))
		group by to_char(bb, 'yyyy-mm')
		order by to_char(bb, 'yyyy-mm') desc
		]]>
	</select>
	
	<select id="monthAllTotal" resultType="Integer" parameterType="Map">
		<![CDATA[
		select nvl(sum(a), 0) as a from
		(select nvl(sum(store_payment_price), 0) as a from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm') <= #{endd}
		group by to_char(store_payment_paymentdate, 'yyyy-mm')
		union all
		select nvl(sum(ticketing_price), 0) as a from ticketing
		where ticketing_state <> 'n'
		and to_char(ticketing_reservetime, 'yyyy-mm') >= #{startd}
		and to_char(ticketing_reservetime, 'yyyy-mm') <= #{endd})
		]]>
	</select>
	
	<select id="monthStore" resultType="com.amor.storePayment.model.StorePaymentDTO" parameterType="Map">
		<![CDATA[
		select nvl(sum(store_payment_price), 0) as a, to_char(store_payment_paymentdate, 'yyyy-mm') as b from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm') <= #{endd}
		group by to_char(store_payment_paymentdate, 'yyyy-mm')
		order by b desc
		]]>
	</select>
	
	<select id="monthStoreTotal" resultType="Integer" parameterType="Map">
		<![CDATA[
		select nvl(sum(store_payment_price), 0) as a from store_payment
		where store_payment_status <> 'n'
		and to_char(store_payment_paymentdate, 'yyyy-mm') >= #{startd}
		and to_char(store_payment_paymentdate, 'yyyy-mm') <= #{endd}
		]]>
	</select>
	
	<select id="mypageStorePaymentList" parameterType="Integer" resultType="com.amor.storePayment.model.MyPageStorePaymentDTO">
		<![CDATA[
		select a.store_payment_idx as paymentidx, c.product_title as productname,
		c.product_img as productimg,a.store_payment_paymentdate as paymentdate,
		a.store_payment_payment as payment, a.store_payment_amount as amount, 
		a.store_payment_price as price,a.store_payment_status as status
		from store_payment a,(select * from member
		where member_idx = #{useridx}) b,product c
		where a.member_idx = b.member_idx 
		and a.product_idx = c.product_idx
		and a.store_payment_status != 'n'
		order by rownum desc
		]]>
	</select>
	
	<update id = "mypageStoreCancell" parameterType="Integer">
		<![CDATA[
		update store_payment
		set store_payment_status = 'n'
		where store_payment_idx = #{paymentidx}
		]]>
	</update>
	
	<select id = "mypageStoreCancellList" parameterType="Integer" resultType="com.amor.storePayment.model.MyPageStorePaymentDTO">
		<![CDATA[
		select a.store_payment_idx as paymentidx, c.product_title as productname,
		c.product_img as productimg,a.store_payment_paymentdate as paymentdate,
		a.store_payment_payment as payment, a.store_payment_amount as amount, 
		a.store_payment_price as price,a.store_payment_status as status
		from store_payment a,(select * from member
		where member_idx = #{useridx}) b,product c
		where a.member_idx = b.member_idx 
		and a.product_idx = c.product_idx
		and a.store_payment_status = 'n'
		order by rownum desc
		]]>
	</select>
	
	<select id="storeListTotalCnt" resultType="Integer">
		select count(*) from store_payment
	</select>
	
	<select id="storeList" parameterType="Map" resultType="com.amor.storePayment.model.StorePaymentDTO">
		select * from
		(select rownum as rnum, a.* from
		(select sp.store_payment_idx,
		(select m.member_id
		from member m
		where m.member_idx=sp.member_idx) as member_id,
		(select p.product_title
		from product p
		where p.product_idx=sp.product_idx) as product_title,
		sp.store_payment_amount,sp.store_payment_price, sp.store_payment_payment,sp.store_payment_paymentdate,sp.store_payment_status
		from store_payment sp order by store_payment_idx desc) a)
		where rnum <![CDATA[>=]]> #{start} and rnum <![CDATA[<=]]> #{end}	
	</select>
	
	<update id="storeListSubmit" parameterType="Map">
		update store_payment
		set store_payment_status=#{status}
		where store_payment_idx=#{idx}
	</update>
	
	<insert id="storePayInsert" parameterType="Map">
		insert into store_payment values(
		store_payment_idx.nextval,
		#{product_idx},#{sidx},
		#{num},#{totalPrice},
		'c',sysdate,'미승인')
	</insert>
	
</mapper>