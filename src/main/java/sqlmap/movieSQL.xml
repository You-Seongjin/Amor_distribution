<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.amor.movieSQL">

<insert id="movieAdd" parameterType="com.amor.movie.model.MovieDTO">
insert into movie values(
movie_idx.nextval, #{movie_name}, #{movie_genre}, #{movie_god}, #{movie_actor}, #{movie_maxage}, 
#{movie_opendate}, #{movie_runningtime}, #{movie_country}, #{movie_content}, #{movie_poster}, 'n', 0, 
#{movie_stillcut1}, #{movie_stillcut2}, #{movie_stillcut3}, #{movie_stillcut4}, #{movie_stillcut5})
</insert>

<select id="movieList" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
<![CDATA[
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
order by a.movie_idx desc)c)d 
where rnum >= #{start} and rnum <= #{end}
]]>
</select>

<select id="movieListSearch" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
<![CDATA[
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
where movie_name like '%${search}%'
order by a.movie_idx desc)c)d 
where rnum >= #{start} and rnum <= #{end}
]]>
</select>

<select id="userMovieListSearch" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
<![CDATA[
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
where movie_state = 'y' and movie_name like '%${search}%'
order by a.movie_idx desc)c)d 
where rnum >= #{start} and rnum <= #{end}
]]>
</select>

<select id="movieContent" parameterType="Integer" resultType="com.amor.movie.model.MovieDTO">
select * from movie where movie_idx = #{movie_idx}
</select>

<update id="movieUpdate" parameterType="com.amor.movie.model.MovieDTO">
update movie set movie_name=#{movie_name}, movie_genre=#{movie_genre}, movie_god = #{movie_god}, 
movie_actor=#{movie_actor}, movie_maxage=#{movie_maxage}, movie_opendate=#{movie_opendate}, 
movie_runningtime=#{movie_runningtime}, movie_state=#{movie_state} ,movie_country=#{movie_country}, movie_content=#{movie_content}, 
movie_poster=#{movie_poster},movie_stillcut1=#{movie_stillcut1}, movie_stillcut2=#{movie_stillcut2}, 
movie_stillcut3=#{movie_stillcut3}, movie_stillcut4=#{movie_stillcut4}, movie_stillcut5=#{movie_stillcut5} 
where movie_idx = #{movie_idx} 

</update>

<delete id="movieDelete" parameterType="Integer">
delete from movie where movie_idx = #{movie_idx}
</delete>

<select id = "userSearchTotalCnt" parameterType="String" resultType="Integer">
	<![CDATA[
	select count(*) from movie
	where movie_name like '%${userSearch}%'	and movie_state = 'y'
	]]>
</select>

<select id="totalCnt" resultType="Integer" >
	select count(*) from 
(select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
order by a.movie_idx desc)
</select>

<select id="totalSearchCnt" resultType="Integer" parameterType="String">
	select count(*) from (select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
order by a.movie_idx desc) where movie_name like '%${userSearch}%'
</select>

<update id="stateChange" parameterType="com.amor.movie.model.MovieDTO">
update movie set movie_state = #{movie_state} where movie_idx = #{movie_idx}
</update>

<select id="movieCnt" resultType="Integer">
	select count(*) from movie
</select>

<select id="movieBest" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
where movie_state='y' and movie_opendate <![CDATA[<=]]> sysdate
order by a.movie_audience desc)c)d 
</select>

<select id="movieBestReview" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select avg(movie_review_star) as movie_review_star_avg, mr.movie_idx, m.movie_name, m.movie_maxage, m.movie_opendate, m.movie_poster, COUNT(*) AS review_cnt
from movie_review mr
inner join movie m on mr.movie_idx = m.movie_idx and m.movie_state = 'y'
group by mr.movie_idx, m.movie_name, m.movie_maxage, movie_opendate, m.movie_poster
) b on a.movie_idx = b.movie_idx
where movie_state='y'
order by review_cnt asc)c)d 
</select>

<select id="movieCome" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
where movie_opendate <![CDATA[>=]]> sysdate and movie_state='y'
order by movie_opendate asc)c)d 
</select>

<select id="movieName" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
where movie_opendate <![CDATA[>=]]> sysdate and movie_state='y'
order by movie_name asc)c)d 
</select>

<select id="movieBestCnt" resultType="Integer">
select count(*) from movie where movie_state='y' 
</select>

<select id="movieComeCnt" resultType="Integer">
select count(*) from movie where movie_state='n' and movie_opendate <![CDATA[>=]]> sysdate order by movie_opendate desc
</select>

<select id="movieReviewInfo" parameterType="Map" resultType="com.amor.movieReview.model.MovieReviewDTO">
	select * from
		(select rownum as rnum,a.* from 
		(select 
		a.movie_review_content, 
		a.movie_review_star, 
		replace(b.member_id, substr(b.member_id, 1, 3), '***') as "member_id",
		to_char(a.movie_review_writedate, 'yyyy-mm-dd') as "movie_review_writedate2",
		a.movie_review_img 
		from movie_review a, member b where a.movie_idx = #{movie_idx} and b.member_idx = a.member_idx
		order by a.movie_review_idx desc)a)b
	where rnum<![CDATA[>=]]>#{start} and rnum<![CDATA[<=]]>#{end}
</select>
<select id="movieReviewContentCnt" parameterType="Integer" resultType="Integer">
	select count(*) from movie_review where movie_idx = #{movie_idx}
</select>

<select id="indexMovieBest" parameterType="Map" resultType="com.amor.movie.model.MovieDTO">
select * from      
(select * from 
(select rownum as rnum, c.* from (
select a.*, nvl(b.movie_review_star_avg, 0) as "avg_movie_review_star"
from movie a
left join (
    select movie_idx, avg(movie_review_star) as movie_review_star_avg
    from movie_review
    group by movie_idx
) b on a.movie_idx = b.movie_idx
where movie_state='y' and movie_opendate <![CDATA[<=]]> sysdate
order by a.movie_audience desc)c)d) where rownum <![CDATA[<=]]> 4
</select>
</mapper>